// Code generated by go-bindata.
// sources:
// kubernetes/authn.config
// kubernetes/authz.config
// kubernetes/auto-accept.conf
// kubernetes/aws/iam/kubernetes-master-policy.json
// kubernetes/aws/iam/kubernetes-master-role.json
// kubernetes/aws/iam/kubernetes-node-policy.json
// kubernetes/aws/iam/kubernetes-node-role.json
// kubernetes/aws/kubeconfig-kube-proxy.yml
// kubernetes/aws/kubeconfig-kubelet.yml
// kubernetes/azure/kubeconfig-kube-proxy.yml
// kubernetes/azure/kubeconfig-kubelet.yml
// kubernetes/cluster-params.sls
// kubernetes/digitalocean/kubeconfig-kube-proxy.yml
// kubernetes/digitalocean/kubeconfig-kubelet.yml
// kubernetes/failhard.conf
// kubernetes/gce/kubeconfig-kube-proxy.yml
// kubernetes/gce/kubeconfig-kubelet.yml
// kubernetes/generic/kubeconfig-kube-proxy.yml
// kubernetes/generic/kubeconfig-kubelet.yml
// kubernetes/kubeconfig.yaml
// kubernetes/linode/kubeconfig-kube-proxy.yml
// kubernetes/linode/kubeconfig-kubelet.yml
// kubernetes/local.conf
// kubernetes/log-level-debug.conf
// kubernetes/master-grains.conf
// kubernetes/node-grains.conf
// kubernetes/packet/kubeconfig-kube-proxy.yml
// kubernetes/packet/kubeconfig-kubelet.yml
// kubernetes/reactor.conf
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _kubernetesAuthnConfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x4d\x4e\xc3\x30\x14\x84\xf7\x3e\xc5\x5c\xc0\x1c\xc0\xbb\xd0\x06\xa8\x8a\x92\xa8\x89\xd7\x96\xeb\x3e\xa9\x51\xc1\x8e\xfc\x43\x91\xa2\xdc\x1d\x25\x6e\xa4\x02\x9b\x2e\xed\xf7\xe6\x9b\x99\x67\x3e\x52\x88\xe4\x83\x60\x00\x87\xd5\x9f\x24\xa0\x87\x21\x18\x77\x22\xae\x53\x3c\x93\x8d\xbd\xd1\xb1\x77\x96\x07\xf2\x5f\xe4\x19\x00\xdc\x64\x62\x79\x00\x79\x22\x30\x8e\x28\x9a\xa6\xdd\xd4\xdb\x52\x15\xb2\x7b\xab\x94\x3c\xbc\x63\x9a\x58\x0a\x7f\x3c\x2e\xe9\x48\x5c\x0f\xfd\x1d\x73\xde\x59\x81\x83\x0e\xe1\xea\xfc\x69\x41\xb6\x5d\x71\xe8\x64\xa3\x36\x75\xf5\xb2\x7b\x55\x5d\xbd\x2f\xab\x19\x9a\x57\x67\x59\x66\xde\xbb\x57\x2d\xa6\xe9\x69\x1c\xb1\x97\xcf\xa5\x92\xbb\xed\x2c\x30\xc9\x7b\xb2\x91\x1b\x67\x23\x7d\x47\x81\x2b\x1d\xcf\xce\x5d\xd8\xed\x23\x08\xc6\xb1\x0e\x7f\xf5\x7c\xe4\x26\x4b\xfe\xff\xc5\x72\xb6\xd5\xe9\x27\x00\x00\xff\xff\x19\xc1\xc2\x9d\x70\x01\x00\x00")

func kubernetesAuthnConfigBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesAuthnConfig,
		"kubernetes/authn.config",
	)
}

func kubernetesAuthnConfig() (*asset, error) {
	bytes, err := kubernetesAuthnConfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/authn.config", size: 368, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesAuthzConfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x6e\x83\x30\x10\x44\xef\xfe\x8a\xf9\x01\xf7\x03\x7c\xa3\x09\x6d\xa3\x54\x80\x02\xbe\xf4\x62\x39\x64\xa5\xa0\xb4\x18\x79\xed\xa6\x2a\xe2\xdf\x2b\x20\x48\xb4\xbd\xe4\x68\xef\xce\x9b\x99\xad\xdf\x23\x07\xf2\xac\x04\x20\xd1\xda\x0f\x52\xb0\x5d\xc7\xb5\x3b\x91\xb4\x31\x9c\x9d\x6f\xbe\x6d\x68\x5c\x2b\x99\xfc\x27\x79\x01\x00\x37\x95\x9a\x1e\xc0\x3c\x51\xe8\x7b\x24\x45\x51\x6e\xf2\x6d\x6a\x12\x5d\xbd\xbc\x19\x7d\x78\xc5\x30\x88\xc8\x7f\x2c\x2e\xf1\x48\xd2\x76\xcd\x8a\x39\xee\x2c\xc0\xce\x32\x5f\x9d\x3f\x4d\xc8\xb2\x4a\x0e\x95\x2e\xcc\x26\xcf\x9e\x76\xcf\xa6\xca\xf7\x69\x36\x42\xe7\xd5\x51\x36\x33\xd7\xee\x59\x89\x61\x78\xe8\x7b\xec\xf5\x63\x6a\xf4\x6e\x3b\x0a\xea\xe8\x3d\xb5\x41\xd6\xae\x0d\xf4\x15\x14\xae\x74\x3c\x3b\x77\x11\xb7\x0f\x56\x42\x62\x19\xfe\xea\x79\xc7\x49\xa6\xf8\xff\x7b\xcd\xd1\x16\xa3\x9f\x00\x00\x00\xff\xff\x42\x0a\x4e\xe5\x6e\x01\x00\x00")

func kubernetesAuthzConfigBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesAuthzConfig,
		"kubernetes/authz.config",
	)
}

func kubernetesAuthzConfig() (*asset, error) {
	bytes, err := kubernetesAuthzConfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/authz.config", size: 366, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesAutoAcceptConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\x2d\xc9\x8f\x4f\x4c\x4e\x4e\x2d\x28\xb1\x52\x08\x29\x2a\x4d\x05\x04\x00\x00\xff\xff\xa5\x9c\x38\x1a\x11\x00\x00\x00")

func kubernetesAutoAcceptConfBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesAutoAcceptConf,
		"kubernetes/auto-accept.conf",
	)
}

func kubernetesAutoAcceptConf() (*asset, error) {
	bytes, err := kubernetesAutoAcceptConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/auto-accept.conf", size: 17, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesAwsIamKubernetesMasterPolicyJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x8d\xcd\xaa\x83\x30\x10\x85\xf7\x79\x8a\x61\x96\xa2\xe0\x0f\x97\x0b\xb3\x73\xd1\x17\x68\xa1\x1b\x71\x11\xd3\xb1\x48\xd3\x04\x92\x88\x0b\xf1\xdd\x4b\x52\xe9\xaa\xab\x82\x9b\x61\x38\xdf\xe1\x3b\xab\x00\xc0\x2b\x3b\x3f\x59\x83\x04\x58\x97\x55\x5d\x54\x65\x51\xfd\x63\x1e\xd1\x25\xc8\xc0\x4f\x36\x01\x09\x3a\x01\x00\xb0\xa6\x0b\x80\xa7\x71\x64\x15\x73\x6c\xb5\xb6\x4b\xea\x27\xd0\xaa\xf0\xb6\x75\xc8\xaa\xa6\x0c\xfb\x0f\x3a\xb3\xb7\xb3\x53\x9c\x60\x86\x7d\xca\xb7\xfc\x07\xb1\x96\x3e\x4c\x4a\x5b\x79\x1b\xa4\x96\x46\x4d\xe6\x7e\xcc\x92\xb3\x73\xe0\xbf\xe6\x08\x39\xfa\xa8\xfd\x6a\xdd\x33\x00\x94\xce\x90\x5c\x3c\xf9\x86\x88\x1e\xf3\xc0\xce\x70\x60\x5f\x64\xb8\x77\xf6\x75\x11\xbf\x4d\xbc\x02\x00\x00\xff\xff\xe3\x9f\x0f\x1e\xd1\x01\x00\x00")

func kubernetesAwsIamKubernetesMasterPolicyJsonBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesAwsIamKubernetesMasterPolicyJson,
		"kubernetes/aws/iam/kubernetes-master-policy.json",
	)
}

func kubernetesAwsIamKubernetesMasterPolicyJson() (*asset, error) {
	bytes, err := kubernetesAwsIamKubernetesMasterPolicyJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/aws/iam/kubernetes-master-policy.json", size: 465, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesAwsIamKubernetesMasterRoleJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\xbb\xaa\xc3\x30\x10\x44\x7b\x7d\xc5\xb0\xf5\xb5\xb1\xdd\x5c\x50\xe7\x22\x7d\x88\x21\x4d\x48\x21\x96\x35\x08\xf4\x08\x5e\x25\x86\x18\xff\x7b\xb0\x08\x69\xa6\x98\x73\x06\x66\x33\x00\x5d\x65\x51\x9f\x13\x59\xd0\xd0\xf5\x43\xd3\x77\x4d\xff\x4f\x7f\x07\x9a\x8a\x2b\x12\x25\x15\xb2\xb8\x19\x00\xd8\x6a\x02\x74\x9a\x67\xe1\xa3\xa7\x31\x84\xbc\x56\xbf\x82\xf3\xe2\x13\xfb\x87\x0b\x64\xb1\x81\x26\x59\x5e\x9e\xe5\x10\x85\x87\xd6\x45\xf7\xce\xc9\xad\xda\x72\x8e\xb4\xff\x56\x23\x97\xef\x07\x2d\x6a\x47\xd5\x67\x94\x4b\x0e\x42\x55\xd8\x0d\x70\x37\xbb\xf9\x04\x00\x00\xff\xff\x42\xf4\xd7\x9b\xb0\x00\x00\x00")

func kubernetesAwsIamKubernetesMasterRoleJsonBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesAwsIamKubernetesMasterRoleJson,
		"kubernetes/aws/iam/kubernetes-master-role.json",
	)
}

func kubernetesAwsIamKubernetesMasterRoleJson() (*asset, error) {
	bytes, err := kubernetesAwsIamKubernetesMasterRoleJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/aws/iam/kubernetes-master-role.json", size: 176, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesAwsIamKubernetesNodePolicyJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\xcf\x6b\x3a\x31\x10\xc5\xef\xfb\x57\x84\x1c\x45\xc1\x1f\x7c\xf9\x42\x6e\xdb\xda\x4a\xc1\x43\xb1\xad\x17\xf1\x10\xd3\x67\x37\x18\x33\x25\x99\xad\x58\xf1\x7f\x2f\x9b\x6e\xb7\x45\xa5\x50\xc1\xcb\x2e\xcc\xfb\xcc\x9b\x21\x6f\x76\x99\x10\x72\x8a\x10\x2d\x79\xa9\x84\xec\x77\x7b\xfd\x4e\xaf\xdb\xe9\xfd\x97\xed\x4a\x7a\x60\xcd\x58\xc3\xb3\x54\x62\x96\x09\x21\xc4\x2e\x7d\x85\x90\x37\xcb\x25\x4c\x55\x97\xb9\x73\xb4\x49\x7c\x12\x72\xc3\xb5\x5b\x1c\xa8\xd6\x77\x7d\x82\x48\x65\x30\x68\xac\x52\x55\x07\xaf\xf4\x26\xaa\x38\x50\x4a\xad\xca\x05\x82\x07\x23\x76\x5a\xb2\x66\xe6\xe9\xbf\x6f\xff\x79\x3a\x4c\x5f\x0d\x11\x4d\xb0\x0b\x9c\x5e\x43\xd6\x43\xce\x34\xcf\x99\xb5\x29\xa6\xe4\xca\x35\x2e\xe1\x3f\xc4\xc5\xfc\x67\x32\x50\xc9\xf8\x57\x05\x34\x3f\x99\x90\x6c\xc9\x73\x5f\xfe\x47\xba\x30\x41\x8d\xc0\x79\xc9\x05\x05\xfb\xae\x2b\xe2\x91\x56\xf0\x4d\x5b\x0d\x5d\x69\x36\xc5\x75\x01\xb3\x1a\xeb\x2d\x42\xfe\xa6\xad\xd3\x0b\xeb\x2c\x6f\x0f\xd1\x11\x78\x48\x1b\xef\x48\x3f\x3f\x05\x77\x4b\x21\x75\x9c\xa0\x26\x78\xa5\x68\x99\xc2\xf6\x9e\x9c\x35\x47\x46\x5f\xc7\xd1\x70\x16\xf1\x90\x19\xdb\xc8\x77\x6b\xfd\x72\xac\xa4\x8d\x47\xf8\x54\x9b\x63\xfd\x35\xa6\xac\xba\xe6\x7d\xf6\x11\x00\x00\xff\xff\x39\xa9\xe1\x3b\x75\x03\x00\x00")

func kubernetesAwsIamKubernetesNodePolicyJsonBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesAwsIamKubernetesNodePolicyJson,
		"kubernetes/aws/iam/kubernetes-node-policy.json",
	)
}

func kubernetesAwsIamKubernetesNodePolicyJson() (*asset, error) {
	bytes, err := kubernetesAwsIamKubernetesNodePolicyJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/aws/iam/kubernetes-node-policy.json", size: 885, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesAwsIamKubernetesNodeRoleJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\xbb\xaa\xc3\x30\x10\x44\x7b\x7d\xc5\xb0\xf5\xb5\xb1\xdd\x5c\x50\xe7\x22\x7d\x88\x21\x4d\x48\x21\x96\x35\x08\xf4\x08\x5e\x25\x86\x18\xff\x7b\xb0\x08\x69\xa6\x98\x73\x06\x66\x33\x00\x5d\x65\x51\x9f\x13\x59\xd0\xd0\xf5\x43\xd3\x77\x4d\xff\x4f\x7f\x07\x9a\x8a\x2b\x12\x25\x15\xb2\xb8\x19\x00\xd8\x6a\x02\x74\x9a\x67\xe1\xa3\xa7\x31\x84\xbc\x56\xbf\x82\xf3\xe2\x13\xfb\x87\x0b\x64\xb1\x81\x26\x59\x5e\x9e\xe5\x10\x85\x87\xd6\x45\xf7\xce\xc9\xad\xda\x72\x8e\xb4\xff\x56\x23\x97\xef\x07\x2d\x6a\x47\xd5\x67\x94\x4b\x0e\x42\x55\xd8\x0d\x70\x37\xbb\xf9\x04\x00\x00\xff\xff\x42\xf4\xd7\x9b\xb0\x00\x00\x00")

func kubernetesAwsIamKubernetesNodeRoleJsonBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesAwsIamKubernetesNodeRoleJson,
		"kubernetes/aws/iam/kubernetes-node-role.json",
	)
}

func kubernetesAwsIamKubernetesNodeRoleJson() (*asset, error) {
	bytes, err := kubernetesAwsIamKubernetesNodeRoleJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/aws/iam/kubernetes-node-role.json", size: 176, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesAwsKubeconfigKubeProxyYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\x31\x4f\xc3\x40\x0c\x05\xe0\xdd\xbf\xe2\x6d\x9d\x6e\x60\xbd\x11\xd4\xa9\x12\x45\x08\x10\x4c\x55\x30\x2e\xb2\x12\x7c\x91\x7d\x17\xb5\xaa\xfa\xdf\x11\x24\x80\x3a\xb0\xdd\xe9\xd9\x9f\x5f\x37\xea\x93\x78\x68\xb1\x8c\xe9\x8a\x7a\xb5\xb7\x8c\x9b\x62\x7b\x7d\xa7\x16\xe2\x91\x29\xc1\xba\x0f\xc9\xe8\xdb\xab\xa4\xd1\xcb\xe1\x48\xc0\x57\x96\x09\x00\x6a\xe9\xc5\x32\x56\xa7\x13\x36\x8f\xd7\xeb\xdd\xdd\xfd\xf6\xf9\x65\xf7\xb0\xdd\xac\x6f\x71\x3e\xaf\x88\x87\x16\xf5\x02\x1a\x0a\x77\x03\x01\x4b\x32\x33\x50\x0b\xe1\xe6\x92\xa2\xd7\x31\xd5\x21\xd2\x24\xae\xfb\x63\x46\xf5\x26\xc4\xc5\xaa\x1c\xea\x37\xb3\xbc\xe7\xc5\x1f\xe5\x97\x5d\xca\x5d\xf6\x9d\x2f\x87\xf8\xa4\x2c\xa9\x63\x2e\xcd\x6a\x5a\x20\xe2\xe6\x2e\x7f\xff\xff\x07\x3f\x03\x00\x00\xff\xff\x57\x1f\x0d\x0b\x2f\x01\x00\x00")

func kubernetesAwsKubeconfigKubeProxyYmlBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesAwsKubeconfigKubeProxyYml,
		"kubernetes/aws/kubeconfig-kube-proxy.yml",
	)
}

func kubernetesAwsKubeconfigKubeProxyYml() (*asset, error) {
	bytes, err := kubernetesAwsKubeconfigKubeProxyYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/aws/kubeconfig-kube-proxy.yml", size: 303, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesAwsKubeconfigKubeletYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\x3f\x4f\xc4\x30\x0c\x05\xf0\xdd\x9f\xe2\x6d\x37\x65\x60\xcd\x08\xea\x74\x08\x96\x83\x15\x95\xe0\x43\x56\x83\x73\xb2\x9d\x0a\x74\xea\x77\x47\xd0\xf2\x6f\x60\x4b\xf4\xec\x9f\xdf\x78\x92\x7b\x36\x97\xa6\x19\xf3\x05\x4d\xa2\x4f\x19\x57\x4d\x8f\xf2\x4c\xdd\xd9\x3c\x53\x82\x8e\x2f\x9c\x31\xf5\x47\xae\x1c\x04\x7c\x04\x99\x00\x20\xda\xc4\x9a\xb1\x3b\x9f\xb1\xbf\xbb\x1c\xae\x87\xc3\xc3\xe1\x76\x3f\xdc\x60\x59\x76\x54\x6a\xf7\xf8\x43\xd4\x56\xc6\x4a\xc0\x96\xac\x06\x44\x9d\x4b\x37\x4e\x3e\xc9\x29\x45\xf5\x34\xb3\xc9\xf1\x2d\x23\xac\x33\x95\xa6\xc1\xaf\xf1\xc9\x6c\xef\x75\xf1\x4b\xf9\x66\xb7\x66\xbf\x9a\xae\x67\x9d\x6d\x96\xc2\x69\x2c\xa5\x75\x8d\xb4\x29\x54\xba\x19\xff\xfc\xff\x1f\x7c\x0f\x00\x00\xff\xff\xac\xf4\x22\xe9\x26\x01\x00\x00")

func kubernetesAwsKubeconfigKubeletYmlBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesAwsKubeconfigKubeletYml,
		"kubernetes/aws/kubeconfig-kubelet.yml",
	)
}

func kubernetesAwsKubeconfigKubeletYml() (*asset, error) {
	bytes, err := kubernetesAwsKubeconfigKubeletYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/aws/kubeconfig-kubelet.yml", size: 294, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesAzureKubeconfigKubeProxyYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\x31\x4f\xc3\x40\x0c\x05\xe0\xdd\xbf\xe2\x6d\x9d\x6e\x60\xbd\x11\xd4\xa9\x12\x45\x08\x10\x4c\x55\x30\x2e\xb2\x12\x7c\x91\x7d\x17\xb5\xaa\xfa\xdf\x11\x24\x80\x3a\xb0\xdd\xe9\xd9\x9f\x5f\x37\xea\x93\x78\x68\xb1\x8c\xe9\x8a\x7a\xb5\xb7\x8c\x9b\x62\x7b\x7d\xa7\x16\xe2\x91\x29\xc1\xba\x0f\xc9\xe8\xdb\xab\xa4\xd1\xcb\xe1\x48\xc0\x57\x96\x09\x00\x6a\xe9\xc5\x32\x56\xa7\x13\x36\x8f\xd7\xeb\xdd\xdd\xfd\xf6\xf9\x65\xf7\xb0\xdd\xac\x6f\x71\x3e\xaf\x88\x87\x16\xf5\x02\x1a\x0a\x77\x03\x01\x4b\x32\x33\x50\x0b\xe1\xe6\x92\xa2\xd7\x31\xd5\x21\xd2\x24\xae\xfb\x63\x46\xf5\x26\xc4\xc5\xaa\x1c\xea\x37\xb3\xbc\xe7\xc5\x1f\xe5\x97\x5d\xca\x5d\xf6\x9d\x2f\x87\xf8\xa4\x2c\xa9\x63\x2e\xcd\x6a\x5a\x20\xe2\xe6\x2e\x7f\xff\xff\x07\x3f\x03\x00\x00\xff\xff\x57\x1f\x0d\x0b\x2f\x01\x00\x00")

func kubernetesAzureKubeconfigKubeProxyYmlBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesAzureKubeconfigKubeProxyYml,
		"kubernetes/azure/kubeconfig-kube-proxy.yml",
	)
}

func kubernetesAzureKubeconfigKubeProxyYml() (*asset, error) {
	bytes, err := kubernetesAzureKubeconfigKubeProxyYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/azure/kubeconfig-kube-proxy.yml", size: 303, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesAzureKubeconfigKubeletYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\x3f\x4f\xc4\x30\x0c\x05\xf0\xdd\x9f\xe2\x6d\x37\x65\x60\xcd\x08\xea\x74\x08\x96\x83\x15\x95\xe0\x43\x56\x83\x73\xb2\x9d\x0a\x74\xea\x77\x47\xd0\xf2\x6f\x60\x4b\xf4\xec\x9f\xdf\x78\x92\x7b\x36\x97\xa6\x19\xf3\x05\x4d\xa2\x4f\x19\x57\x4d\x8f\xf2\x4c\xdd\xd9\x3c\x53\x82\x8e\x2f\x9c\x31\xf5\x47\xae\x1c\x04\x7c\x04\x99\x00\x20\xda\xc4\x9a\xb1\x3b\x9f\xb1\xbf\xbb\x1c\xae\x87\xc3\xc3\xe1\x76\x3f\xdc\x60\x59\x76\x54\x6a\xf7\xf8\x43\xd4\x56\xc6\x4a\xc0\x96\xac\x06\x44\x9d\x4b\x37\x4e\x3e\xc9\x29\x45\xf5\x34\xb3\xc9\xf1\x2d\x23\xac\x33\x95\xa6\xc1\xaf\xf1\xc9\x6c\xef\x75\xf1\x4b\xf9\x66\xb7\x66\xbf\x9a\xae\x67\x9d\x6d\x96\xc2\x69\x2c\xa5\x75\x8d\xb4\x29\x54\xba\x19\xff\xfc\xff\x1f\x7c\x0f\x00\x00\xff\xff\xac\xf4\x22\xe9\x26\x01\x00\x00")

func kubernetesAzureKubeconfigKubeletYmlBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesAzureKubeconfigKubeletYml,
		"kubernetes/azure/kubeconfig-kubelet.yml",
	)
}

func kubernetesAzureKubeconfigKubeletYml() (*asset, error) {
	bytes, err := kubernetesAzureKubeconfigKubeletYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/azure/kubeconfig-kubelet.yml", size: 294, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesClusterParamsSls = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\x4d\x6f\xe3\xac\x1a\xdd\xf7\x57\x58\x1a\x45\x5d\xdd\xf5\x95\xba\xa3\x36\x6d\x50\x1d\xb0\x30\xe9\xbd\x33\x9b\x47\xd4\x26\x09\xaa\x03\xbe\x80\x3b\xb7\x93\x37\xff\xfd\x95\xbf\x1a\xa7\x75\x32\xf3\x76\x55\x99\x73\xce\x03\xe7\xf9\x80\xc8\x72\xaf\xbd\xd7\xd6\x40\x61\x4d\x70\xb6\xba\x8b\x6e\x0f\x87\x08\x25\x2b\x92\xe7\x84\x51\x88\x19\x15\x9c\xa5\xd1\xf1\x78\x7b\x23\xab\xca\x16\x32\x28\x30\xb6\x54\x50\xe8\xd2\xf9\x01\x9e\xa6\x2c\x46\x02\x03\x65\x09\x86\x98\x24\x3c\xef\x08\x45\xd5\xf8\xa0\x5c\x07\xed\x91\x71\xba\xce\x05\xe6\x40\x32\xe0\x88\x3e\xe2\x0e\x56\x1a\x0f\xa5\xdd\x4b\x6d\x7a\x50\x42\x73\x48\xd8\x0a\x11\xfa\xb1\xec\x54\x5d\xe9\x42\xfa\x13\x80\xe3\x2c\x25\x31\xca\xa3\xbf\x22\x6d\x82\xda\x2a\xf7\x01\xf6\xca\xbd\x29\x77\x82\xe6\x98\x3f\x77\x31\x3b\x84\xaa\xa4\x0f\xba\xf0\x4a\xba\x62\xf7\x49\x18\xa7\x28\x17\x24\xce\x31\xe2\xf1\x12\x52\xf6\xf8\x48\xe8\xe3\xa5\x50\xca\xc8\x97\x4a\xc1\x78\x48\x59\x29\x17\x06\x19\x8a\xee\x53\x0c\xe3\x61\x51\x8a\xb9\x98\xa3\x94\xc6\xcf\x12\x12\x9a\xcf\xc1\x2b\xbb\xdd\x6a\xb3\x9d\xa5\x0c\x7b\x9d\xa3\xed\xad\xd1\xc1\xba\x4b\xcc\x15\xa3\x44\x30\x7e\x81\xec\xd4\x56\xfb\xe0\xde\xef\xa2\xdb\x8d\xac\xbc\xba\x8d\x66\xff\x0e\xdf\x22\x8e\x57\xec\x19\x47\xdf\x8e\x9f\x25\x1a\xfd\x1b\xf2\x65\x89\xb0\xd3\xae\x84\x5a\xba\xf0\x0e\x4e\x79\xdb\xb8\x42\x9d\x1d\x42\x2c\x09\x4f\x20\x43\x5c\x7c\x07\x8e\x73\xb6\xe6\x31\x9e\x1e\xa3\xfa\x37\x54\x56\x96\x2f\xb2\x92\xa6\xe8\x1d\x30\xd6\xfc\x93\x53\xec\xa5\xd1\x1b\xe5\x03\x34\xae\x3a\x0b\xbd\x42\x94\x3c\xe0\x5c\xc0\x9a\xa7\xd3\x90\x5d\x73\xcc\xa5\xaa\x6b\x8e\x69\x9e\x76\x52\xbb\x5a\x1b\xd8\xdb\x72\x38\xd5\x12\x11\x9e\x11\x0a\x2b\x96\xf4\xc7\xd0\xc6\x07\x69\x0a\x05\xb5\x53\x1b\xfd\xff\x1e\x45\x68\x2e\x10\x8d\x31\x64\x1c\x3f\x90\xff\x76\xc0\xd7\xe6\x45\x39\xa3\x82\xf2\xb0\x97\x9d\xed\x46\xee\xd5\x5d\x74\x38\x44\x4f\xeb\x7b\xcc\x29\x16\x38\x87\x15\xea\x52\x4e\xd1\xaa\x95\xbf\x19\x76\x09\xa5\xf2\x41\x1b\x19\xb4\x1d\x3a\x70\xac\xfc\x04\xe7\x82\x50\x24\x08\xeb\x5b\xf1\xab\x19\x5f\x5c\x98\x42\x60\xa7\x64\x39\x76\xe2\x14\x09\x4b\x8c\x12\xcc\x07\x42\xb7\xdd\xb6\xb3\x9c\x91\x15\xe8\x3a\xea\xb6\x3d\xec\x95\x50\x81\x39\x45\x69\xdf\xbe\x37\x46\x85\x9f\xd6\xbd\x42\xed\xec\x9b\xfe\xd0\xa6\x58\xfc\x87\xf1\x27\xc8\x38\x7b\x26\xa3\x70\x97\x88\x3f\x34\xf0\x5f\x2d\x78\xa0\x04\xb9\xf5\xbf\xc3\x35\xfb\x2e\xcf\xbe\xdb\x29\x5d\xaf\xba\xe4\x9e\x0f\x88\x1b\xd7\x98\xa0\xf7\xaa\x9d\xac\x1b\x3d\x94\x02\x5f\x53\x41\x56\xb8\x1d\xab\x0f\xa4\xaf\x82\x76\x5a\xe9\xe2\xd4\x2e\xba\x06\x27\xcd\x76\xa8\x88\x76\x76\x91\xf8\xd4\xad\x67\x83\xf3\x97\x35\x7d\x8a\x7f\x30\xda\x25\xf4\xb0\x88\xf4\xe6\x73\x83\xe7\x38\x5e\x73\x22\xbe\x47\x8b\xe3\xa7\xce\xf4\xaa\x68\x9c\x0e\xef\x5d\xa8\x0b\xac\xe3\xf1\xf6\xb0\x88\x94\x29\xf5\x26\x5a\x8c\x11\xda\x92\x4a\xb1\x80\x8c\x71\x11\x2d\x8e\x6d\xf1\x55\x2a\x40\x6d\x87\x09\x38\x5d\x9f\x15\x10\x98\xaf\xda\xc2\xc2\x09\x64\x2c\x81\xc7\x18\xc4\x92\xe3\x7c\xc9\xd2\x24\x5a\x1c\x83\x72\xfb\xb6\x1e\x55\x09\xb5\x2d\x61\x5b\x40\xd8\x39\xe5\x77\xb6\x2a\x3b\xf9\x2b\xec\xd9\x68\xe3\xd1\xd6\xb9\x60\x2b\x58\x61\xc1\x49\x9c\x4f\xec\x68\x7c\xb0\x7b\xd8\xab\xe0\x74\xe1\xcf\xcc\x38\x63\x5c\xd5\x1e\x6c\x7b\xce\xe8\x57\x9f\xdf\x6a\x33\x67\xf1\x73\x46\x67\x25\x9f\x33\x0a\x59\xfe\x14\x2d\x8e\x6f\xb5\x81\xda\xbf\x76\xe4\xe1\xeb\x2c\x03\x65\x59\x1e\xb7\xe3\x05\x65\x04\x1e\x79\x16\x03\xa6\x49\xc6\x08\x6d\xb3\x23\xeb\xda\x17\x6d\x61\xcb\x5a\xc3\xd6\xd5\x05\x28\x53\xd6\x56\x9b\x3e\x57\x97\xb9\xbf\x0f\xb5\x14\x22\xbb\x18\x6a\x17\x42\x7d\x25\xd4\x19\xf7\x7a\xa8\xd1\x30\xce\x98\x18\x5f\x06\x93\x60\x1f\x77\x95\xb5\x61\xfa\x90\xb8\xc6\xbf\x1e\x90\xe6\x53\xfd\xe1\x96\x9e\xac\x5e\x6c\x0a\x58\x93\x64\x68\x08\x68\x74\xf9\xd1\x0c\xed\xf7\x59\x52\x7f\x29\xa0\x7b\x9c\xb6\x21\xfb\xbb\x43\xbe\xa8\xaa\x0f\x39\x59\xbd\x56\x7c\x1d\x2c\xe3\xec\x3e\xc5\x2b\x48\xb0\xc0\xb1\x60\xfc\x54\x86\x9d\x6a\xed\xec\x4b\xa5\xf6\x50\xaa\xa0\x8a\x60\xdd\xb4\x20\x67\xf9\xf3\xdb\x1d\x07\x2d\x4b\x49\xfc\xfd\x34\x6f\x17\xc7\x8f\xc1\x6c\x2b\x5d\xbc\x9f\xcf\xe7\x0b\xac\xaf\x11\x64\x13\xac\xf2\x85\xac\x55\x64\x37\xd3\x73\x3e\x93\xb8\xbd\x84\x60\x89\x78\xeb\xaf\x7a\xd3\x45\x7b\x5b\xc1\x4e\xba\xde\xe4\x33\xc4\x57\x61\x65\xca\x89\xf6\xe2\x78\xb3\x51\xa5\x72\xdd\x8d\x37\xbe\x3d\x61\x2f\xeb\xbb\xe8\xb6\xbd\x04\xda\xff\xfd\xff\x1a\xe5\xe4\xf0\xce\x6d\xbf\x47\xd1\xb7\x48\xfe\xf4\x91\x35\xd5\xfb\xb9\xfd\x1c\xe7\xf1\x12\x27\xeb\x14\x4f\x4c\x77\xca\x17\x3b\x55\x36\x95\x3a\xb3\x7a\x82\x9d\x35\x98\x50\x22\x08\x4a\x01\x8b\x38\x19\xeb\x36\x5a\x1c\xb5\xd1\x41\xcb\x0a\x54\x28\xca\xb1\xde\x3b\xd9\x39\xfc\xac\xf0\x92\xe5\xa2\xbb\xf7\x17\xc7\x9d\xf5\xa1\x7f\x1d\xdc\x1e\x0e\xe3\xf7\x8b\x24\x20\x0f\x28\x1e\x69\xa0\x37\xb2\x38\x11\xfb\xb5\x6b\xa5\xc9\xef\x51\x0c\x68\x2d\x96\x3f\x26\xd6\xbc\xc8\x02\x64\x13\x76\xbf\xce\xde\x47\x13\xe8\x9f\x8d\x83\x75\xde\x79\xf3\x65\x0e\x34\x7e\x7c\x17\xcc\x53\xfe\x4c\x3d\xe6\x18\xf5\x6d\xf4\x25\x40\xe1\x94\x1c\x5b\xe8\x32\xf1\xa2\xa3\x0f\x28\x16\x79\x77\x52\x10\xec\x09\xd3\xc1\xdb\x8d\x2c\x82\xef\x7c\x81\x60\x5f\xd5\xf0\x14\x9b\x25\x5c\x73\x1c\x65\x64\xf8\xc1\x73\x8f\x72\xd2\x3a\x9a\x10\x71\x32\x5f\xd6\xba\xff\x7d\x04\x2f\xd2\xeb\x36\x0f\xa5\x3e\xff\xd9\x32\x2f\x30\x1b\x32\x67\x0f\x22\x65\xf1\xd3\x3a\x83\x0c\x51\x12\x47\x8b\xa3\xb7\x9b\x50\xd9\xe2\xb5\xa9\xa1\x96\x46\x17\xc3\x33\xe6\x33\xf0\x93\xdc\xdf\x01\x00\x00\xff\xff\x48\x2d\xe0\x3f\x88\x0e\x00\x00")

func kubernetesClusterParamsSlsBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesClusterParamsSls,
		"kubernetes/cluster-params.sls",
	)
}

func kubernetesClusterParamsSls() (*asset, error) {
	bytes, err := kubernetesClusterParamsSlsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/cluster-params.sls", size: 3720, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesDigitaloceanKubeconfigKubeProxyYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\x31\x4f\xc3\x40\x0c\x05\xe0\xdd\xbf\xe2\x6d\x9d\x6e\x60\xbd\x11\xd4\xa9\x12\x45\x08\x10\x4c\x55\x30\x2e\xb2\x12\x7c\x91\x7d\x17\xb5\xaa\xfa\xdf\x11\x24\x80\x3a\xb0\xdd\xe9\xd9\x9f\x5f\x37\xea\x93\x78\x68\xb1\x8c\xe9\x8a\x7a\xb5\xb7\x8c\x9b\x62\x7b\x7d\xa7\x16\xe2\x91\x29\xc1\xba\x0f\xc9\xe8\xdb\xab\xa4\xd1\xcb\xe1\x48\xc0\x57\x96\x09\x00\x6a\xe9\xc5\x32\x56\xa7\x13\x36\x8f\xd7\xeb\xdd\xdd\xfd\xf6\xf9\x65\xf7\xb0\xdd\xac\x6f\x71\x3e\xaf\x88\x87\x16\xf5\x02\x1a\x0a\x77\x03\x01\x4b\x32\x33\x50\x0b\xe1\xe6\x92\xa2\xd7\x31\xd5\x21\xd2\x24\xae\xfb\x63\x46\xf5\x26\xc4\xc5\xaa\x1c\xea\x37\xb3\xbc\xe7\xc5\x1f\xe5\x97\x5d\xca\x5d\xf6\x9d\x2f\x87\xf8\xa4\x2c\xa9\x63\x2e\xcd\x6a\x5a\x20\xe2\xe6\x2e\x7f\xff\xff\x07\x3f\x03\x00\x00\xff\xff\x57\x1f\x0d\x0b\x2f\x01\x00\x00")

func kubernetesDigitaloceanKubeconfigKubeProxyYmlBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesDigitaloceanKubeconfigKubeProxyYml,
		"kubernetes/digitalocean/kubeconfig-kube-proxy.yml",
	)
}

func kubernetesDigitaloceanKubeconfigKubeProxyYml() (*asset, error) {
	bytes, err := kubernetesDigitaloceanKubeconfigKubeProxyYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/digitalocean/kubeconfig-kube-proxy.yml", size: 303, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesDigitaloceanKubeconfigKubeletYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\x3f\x4f\xc4\x30\x0c\x05\xf0\xdd\x9f\xe2\x6d\x37\x65\x60\xcd\x08\xea\x74\x08\x96\x83\x15\x95\xe0\x43\x56\x83\x73\xb2\x9d\x0a\x74\xea\x77\x47\xd0\xf2\x6f\x60\x4b\xf4\xec\x9f\xdf\x78\x92\x7b\x36\x97\xa6\x19\xf3\x05\x4d\xa2\x4f\x19\x57\x4d\x8f\xf2\x4c\xdd\xd9\x3c\x53\x82\x8e\x2f\x9c\x31\xf5\x47\xae\x1c\x04\x7c\x04\x99\x00\x20\xda\xc4\x9a\xb1\x3b\x9f\xb1\xbf\xbb\x1c\xae\x87\xc3\xc3\xe1\x76\x3f\xdc\x60\x59\x76\x54\x6a\xf7\xf8\x43\xd4\x56\xc6\x4a\xc0\x96\xac\x06\x44\x9d\x4b\x37\x4e\x3e\xc9\x29\x45\xf5\x34\xb3\xc9\xf1\x2d\x23\xac\x33\x95\xa6\xc1\xaf\xf1\xc9\x6c\xef\x75\xf1\x4b\xf9\x66\xb7\x66\xbf\x9a\xae\x67\x9d\x6d\x96\xc2\x69\x2c\xa5\x75\x8d\xb4\x29\x54\xba\x19\xff\xfc\xff\x1f\x7c\x0f\x00\x00\xff\xff\xac\xf4\x22\xe9\x26\x01\x00\x00")

func kubernetesDigitaloceanKubeconfigKubeletYmlBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesDigitaloceanKubeconfigKubeletYml,
		"kubernetes/digitalocean/kubeconfig-kubelet.yml",
	)
}

func kubernetesDigitaloceanKubeconfigKubeletYml() (*asset, error) {
	bytes, err := kubernetesDigitaloceanKubeconfigKubeletYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/digitalocean/kubeconfig-kubelet.yml", size: 294, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesFailhardConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x4b\xcc\xcc\xc9\x48\x2c\x4a\xb1\x52\x08\x29\x2a\x4d\xe5\x02\x04\x00\x00\xff\xff\xc6\x72\x42\xf1\x0f\x00\x00\x00")

func kubernetesFailhardConfBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesFailhardConf,
		"kubernetes/failhard.conf",
	)
}

func kubernetesFailhardConf() (*asset, error) {
	bytes, err := kubernetesFailhardConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/failhard.conf", size: 15, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesGceKubeconfigKubeProxyYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\x31\x4f\xc3\x40\x0c\x05\xe0\xdd\xbf\xe2\x6d\x9d\x6e\x60\xbd\x0d\xa2\x4c\x95\x28\xaa\x0a\x82\x29\x3a\x5c\x17\x4e\x09\x77\x95\xcf\x57\xb5\x8a\xf2\xdf\x11\x24\x80\x3a\xb0\xd9\x7a\xd6\xe7\x17\x8e\xf1\x49\xb4\xc4\x9c\x3c\x4e\x37\xd4\xc7\xb4\xf7\x68\x72\x3a\xc4\x37\xaa\x45\xb4\x78\x72\x48\xe1\x43\x3c\xfa\xfa\x2a\xee\xa8\xf9\x7c\x21\xe0\x2b\xf3\x04\x00\x96\x7b\x49\x1e\xab\x71\xc4\xfa\xf1\xae\xed\x1e\xb6\x9b\xe7\x97\x6e\xb7\x59\xb7\xf7\x98\xa6\x15\xf1\x50\x8b\x5d\x41\x43\xe6\x30\x10\xb0\x24\x33\x03\x16\xb5\x78\x88\x1c\x4c\x5c\xa8\xf6\x9e\x35\xda\xc5\xed\x83\x05\x8f\x71\x44\x73\xdb\x35\xed\x76\x87\x69\x22\xce\xc9\xe4\x6c\xdf\xe2\x32\xcf\xc6\x0f\xf8\xfb\x61\xe9\x79\x5d\x7d\x2e\x51\x44\x4f\x91\xc5\x05\xe6\x5c\x93\xb9\x05\x22\xae\xaa\xf2\xb7\xff\x7f\xf8\x19\x00\x00\xff\xff\xa9\x83\xf6\x23\x3a\x01\x00\x00")

func kubernetesGceKubeconfigKubeProxyYmlBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesGceKubeconfigKubeProxyYml,
		"kubernetes/gce/kubeconfig-kube-proxy.yml",
	)
}

func kubernetesGceKubeconfigKubeProxyYml() (*asset, error) {
	bytes, err := kubernetesGceKubeconfigKubeProxyYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/gce/kubeconfig-kube-proxy.yml", size: 314, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesGceKubeconfigKubeletYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\x31\x4e\x03\x31\x10\x45\xfb\x39\xc5\x5c\xc0\x05\xad\x3b\x58\xb9\x0a\x15\x0a\x48\x54\x68\x98\x4c\x60\xb4\xc6\x46\xf6\x38\x02\x45\xbe\x3b\xda\xec\x86\x2c\x42\xe9\x6c\xfd\xef\xf7\xfc\xe9\x53\x9f\xa4\x54\xcd\xc9\xe3\xe1\x06\x46\x4d\x3b\x8f\x43\x4e\x7b\x7d\x83\x56\xa5\x54\x0f\x0e\x13\x7d\x88\xc7\xb1\xbd\x4a\x14\x03\xc4\x29\xf0\x80\x88\xc8\x51\x25\x99\x63\x29\xa6\x7b\x65\x32\x71\x3b\x32\xf2\x78\x3c\x6e\x1e\xef\xc2\x7d\xd8\xbe\x0c\xe1\x61\xdb\xfb\xba\x3d\xca\xf7\xbf\xd6\x26\x3c\xf7\x0e\x1c\x5b\xb5\x3f\xd2\x98\x99\x22\x4c\x4f\x4f\xc9\x62\x5d\xe9\xa8\xd9\x7b\x2e\x6a\x17\xe4\x70\x7b\x76\x72\x4e\x26\x5f\x76\xc2\x2d\xe7\xf3\xb7\x67\xda\x2f\x7e\xd9\xb4\xda\x38\xeb\xab\x94\x83\xb2\x38\x62\xce\x6d\x1a\x3a\x53\x80\x5b\x29\x72\xb9\x5f\x2f\xfe\x04\x00\x00\xff\xff\x48\x12\x05\x43\x60\x01\x00\x00")

func kubernetesGceKubeconfigKubeletYmlBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesGceKubeconfigKubeletYml,
		"kubernetes/gce/kubeconfig-kubelet.yml",
	)
}

func kubernetesGceKubeconfigKubeletYml() (*asset, error) {
	bytes, err := kubernetesGceKubeconfigKubeletYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/gce/kubeconfig-kubelet.yml", size: 352, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesGenericKubeconfigKubeProxyYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\x31\x4f\xc3\x40\x0c\x05\xe0\xdd\xbf\xe2\x6d\x9d\x6e\x60\xbd\x11\xd4\xa9\x12\x45\x08\x10\x4c\x55\x30\x2e\xb2\x12\x7c\x91\x7d\x17\xb5\xaa\xfa\xdf\x11\x24\x80\x3a\xb0\xdd\xe9\xd9\x9f\x5f\x37\xea\x93\x78\x68\xb1\x8c\xe9\x8a\x7a\xb5\xb7\x8c\x9b\x62\x7b\x7d\xa7\x16\xe2\x91\x29\xc1\xba\x0f\xc9\xe8\xdb\xab\xa4\xd1\xcb\xe1\x48\xc0\x57\x96\x09\x00\x6a\xe9\xc5\x32\x56\xa7\x13\x36\x8f\xd7\xeb\xdd\xdd\xfd\xf6\xf9\x65\xf7\xb0\xdd\xac\x6f\x71\x3e\xaf\x88\x87\x16\xf5\x02\x1a\x0a\x77\x03\x01\x4b\x32\x33\x50\x0b\xe1\xe6\x92\xa2\xd7\x31\xd5\x21\xd2\x24\xae\xfb\x63\x46\xf5\x26\xc4\xc5\xaa\x1c\xea\x37\xb3\xbc\xe7\xc5\x1f\xe5\x97\x5d\xca\x5d\xf6\x9d\x2f\x87\xf8\xa4\x2c\xa9\x63\x2e\xcd\x6a\x5a\x20\xe2\xe6\x2e\x7f\xff\xff\x07\x3f\x03\x00\x00\xff\xff\x57\x1f\x0d\x0b\x2f\x01\x00\x00")

func kubernetesGenericKubeconfigKubeProxyYmlBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesGenericKubeconfigKubeProxyYml,
		"kubernetes/generic/kubeconfig-kube-proxy.yml",
	)
}

func kubernetesGenericKubeconfigKubeProxyYml() (*asset, error) {
	bytes, err := kubernetesGenericKubeconfigKubeProxyYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/generic/kubeconfig-kube-proxy.yml", size: 303, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesGenericKubeconfigKubeletYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\x3f\x4f\xc4\x30\x0c\x05\xf0\xdd\x9f\xe2\x6d\x37\x65\x60\xcd\x08\xea\x74\x08\x96\x83\x15\x95\xe0\x43\x56\x83\x73\xb2\x9d\x0a\x74\xea\x77\x47\xd0\xf2\x6f\x60\x4b\xf4\xec\x9f\xdf\x78\x92\x7b\x36\x97\xa6\x19\xf3\x05\x4d\xa2\x4f\x19\x57\x4d\x8f\xf2\x4c\xdd\xd9\x3c\x53\x82\x8e\x2f\x9c\x31\xf5\x47\xae\x1c\x04\x7c\x04\x99\x00\x20\xda\xc4\x9a\xb1\x3b\x9f\xb1\xbf\xbb\x1c\xae\x87\xc3\xc3\xe1\x76\x3f\xdc\x60\x59\x76\x54\x6a\xf7\xf8\x43\xd4\x56\xc6\x4a\xc0\x96\xac\x06\x44\x9d\x4b\x37\x4e\x3e\xc9\x29\x45\xf5\x34\xb3\xc9\xf1\x2d\x23\xac\x33\x95\xa6\xc1\xaf\xf1\xc9\x6c\xef\x75\xf1\x4b\xf9\x66\xb7\x66\xbf\x9a\xae\x67\x9d\x6d\x96\xc2\x69\x2c\xa5\x75\x8d\xb4\x29\x54\xba\x19\xff\xfc\xff\x1f\x7c\x0f\x00\x00\xff\xff\xac\xf4\x22\xe9\x26\x01\x00\x00")

func kubernetesGenericKubeconfigKubeletYmlBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesGenericKubeconfigKubeletYml,
		"kubernetes/generic/kubeconfig-kubelet.yml",
	)
}

func kubernetesGenericKubeconfigKubeletYml() (*asset, error) {
	bytes, err := kubernetesGenericKubeconfigKubeletYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/generic/kubeconfig-kubelet.yml", size: 294, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesKubeconfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x7e\x0a\xbd\x40\x0e\xbb\xfa\xd6\x05\xc1\x46\xbb\x0c\x1c\xa7\x6c\xa7\x60\x5c\x65\x33\xdd\x9c\x22\x3b\x65\x25\xf8\xdd\x47\x1d\x77\x2d\xdd\x4d\xf0\x7f\xe2\xfb\x25\x73\x70\x5b\xe2\xe0\x46\x2f\xe1\xf8\x20\xec\xd7\x14\x22\x71\x90\xa2\x82\x32\x4b\x01\x00\x60\x89\xa3\x1b\x9c\x35\x91\x2a\x33\xc5\xcf\x91\x5d\x3c\x55\x3b\x13\x8d\x84\x79\x86\x7a\xd5\xd7\xa8\x34\xa4\x94\xe9\x40\x7c\x24\xce\xc9\xba\x7b\xc4\xbe\x45\xb5\x45\x95\x43\x6f\xbe\x69\x59\x41\xa5\xfb\x66\xf5\x82\x29\x09\x3b\xfa\x48\x3f\x71\xd1\x2e\x73\xd1\x96\x0e\x79\x61\xd3\xb5\x1a\xd5\x65\xe7\x1c\x4f\xe1\x2e\xeb\xda\x02\xc0\x9d\xec\xb5\xd1\xf8\x76\xf5\x4d\xcc\xe4\x63\x75\x71\x65\xa4\x53\x0a\x1b\xdd\x17\x34\x25\xb1\x77\x7e\x27\xa1\x1e\xfd\xe0\x3e\xc4\x81\x69\x20\x26\x6f\x29\x48\x98\x93\x38\xab\x73\xdf\x3f\xc7\xaa\xd3\x4f\x37\xee\xdc\xad\x1c\xe1\xb2\xec\xe6\x85\xd7\xc7\x6d\x9e\xb3\x14\x95\x2e\x37\x15\x7a\x4f\xa7\x7f\xd4\x1a\xdf\x21\xa5\xdf\x00\x00\x00\xff\xff\x9a\x48\xf1\x79\xb3\x01\x00\x00")

func kubernetesKubeconfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesKubeconfigYaml,
		"kubernetes/kubeconfig.yaml",
	)
}

func kubernetesKubeconfigYaml() (*asset, error) {
	bytes, err := kubernetesKubeconfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/kubeconfig.yaml", size: 435, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesLinodeKubeconfigKubeProxyYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\x31\x4f\xc3\x40\x0c\x05\xe0\xdd\xbf\xe2\x6d\x9d\x6e\x60\xbd\x11\xd4\xa9\x12\x45\x08\x10\x4c\x55\x30\x2e\xb2\x12\x7c\x91\x7d\x17\xb5\xaa\xfa\xdf\x11\x24\x80\x3a\xb0\xdd\xe9\xd9\x9f\x5f\x37\xea\x93\x78\x68\xb1\x8c\xe9\x8a\x7a\xb5\xb7\x8c\x9b\x62\x7b\x7d\xa7\x16\xe2\x91\x29\xc1\xba\x0f\xc9\xe8\xdb\xab\xa4\xd1\xcb\xe1\x48\xc0\x57\x96\x09\x00\x6a\xe9\xc5\x32\x56\xa7\x13\x36\x8f\xd7\xeb\xdd\xdd\xfd\xf6\xf9\x65\xf7\xb0\xdd\xac\x6f\x71\x3e\xaf\x88\x87\x16\xf5\x02\x1a\x0a\x77\x03\x01\x4b\x32\x33\x50\x0b\xe1\xe6\x92\xa2\xd7\x31\xd5\x21\xd2\x24\xae\xfb\x63\x46\xf5\x26\xc4\xc5\xaa\x1c\xea\x37\xb3\xbc\xe7\xc5\x1f\xe5\x97\x5d\xca\x5d\xf6\x9d\x2f\x87\xf8\xa4\x2c\xa9\x63\x2e\xcd\x6a\x5a\x20\xe2\xe6\x2e\x7f\xff\xff\x07\x3f\x03\x00\x00\xff\xff\x57\x1f\x0d\x0b\x2f\x01\x00\x00")

func kubernetesLinodeKubeconfigKubeProxyYmlBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesLinodeKubeconfigKubeProxyYml,
		"kubernetes/linode/kubeconfig-kube-proxy.yml",
	)
}

func kubernetesLinodeKubeconfigKubeProxyYml() (*asset, error) {
	bytes, err := kubernetesLinodeKubeconfigKubeProxyYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/linode/kubeconfig-kube-proxy.yml", size: 303, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesLinodeKubeconfigKubeletYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\x3f\x4f\xc4\x30\x0c\x05\xf0\xdd\x9f\xe2\x6d\x37\x65\x60\xcd\x08\xea\x74\x08\x96\x83\x15\x95\xe0\x43\x56\x83\x73\xb2\x9d\x0a\x74\xea\x77\x47\xd0\xf2\x6f\x60\x4b\xf4\xec\x9f\xdf\x78\x92\x7b\x36\x97\xa6\x19\xf3\x05\x4d\xa2\x4f\x19\x57\x4d\x8f\xf2\x4c\xdd\xd9\x3c\x53\x82\x8e\x2f\x9c\x31\xf5\x47\xae\x1c\x04\x7c\x04\x99\x00\x20\xda\xc4\x9a\xb1\x3b\x9f\xb1\xbf\xbb\x1c\xae\x87\xc3\xc3\xe1\x76\x3f\xdc\x60\x59\x76\x54\x6a\xf7\xf8\x43\xd4\x56\xc6\x4a\xc0\x96\xac\x06\x44\x9d\x4b\x37\x4e\x3e\xc9\x29\x45\xf5\x34\xb3\xc9\xf1\x2d\x23\xac\x33\x95\xa6\xc1\xaf\xf1\xc9\x6c\xef\x75\xf1\x4b\xf9\x66\xb7\x66\xbf\x9a\xae\x67\x9d\x6d\x96\xc2\x69\x2c\xa5\x75\x8d\xb4\x29\x54\xba\x19\xff\xfc\xff\x1f\x7c\x0f\x00\x00\xff\xff\xac\xf4\x22\xe9\x26\x01\x00\x00")

func kubernetesLinodeKubeconfigKubeletYmlBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesLinodeKubeconfigKubeletYml,
		"kubernetes/linode/kubeconfig-kubelet.yml",
	)
}

func kubernetesLinodeKubeconfigKubeletYml() (*asset, error) {
	bytes, err := kubernetesLinodeKubeconfigKubeletYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/linode/kubeconfig-kubelet.yml", size: 294, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesLocalConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xcb\xcc\x49\x8d\x4f\xce\xc9\x4c\xcd\x2b\xb1\x52\xc8\xc9\x4f\x4e\xcc\xe1\x02\x0b\x15\xe5\xe7\x97\x14\x5b\x71\x29\x28\x24\x25\x16\xa7\x82\x68\x05\x05\x5d\x05\xfd\xe2\xa2\x32\xfd\xe2\xc4\x9c\x12\x2e\x40\x00\x00\x00\xff\xff\xbf\x21\x82\xc3\x37\x00\x00\x00")

func kubernetesLocalConfBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesLocalConf,
		"kubernetes/local.conf",
	)
}

func kubernetesLocalConf() (*asset, error) {
	bytes, err := kubernetesLocalConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/local.conf", size: 55, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesLogLevelDebugConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xc9\x4f\x8f\xcf\x49\x2d\x4b\xcd\xb1\x52\x48\x49\x4d\x2a\x4d\xe7\x82\x0b\xc4\xe7\xe4\xa7\xa7\x65\xe6\xa4\xc2\x24\x00\x01\x00\x00\xff\xff\xe8\x72\xc0\x48\x2a\x00\x00\x00")

func kubernetesLogLevelDebugConfBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesLogLevelDebugConf,
		"kubernetes/log-level-debug.conf",
	)
}

func kubernetesLogLevelDebugConf() (*asset, error) {
	bytes, err := kubernetesLogLevelDebugConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/log-level-debug.conf", size: 42, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesMasterGrainsConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x53\xdb\x30\x10\xbd\xf3\x2b\x76\x60\x18\x2e\x25\x7c\xb4\x3d\x34\x33\x1c\x4c\x22\x82\x07\x13\xbb\xb2\xcd\xa1\x17\x8d\x62\xad\x1d\x0d\x8e\x94\x4a\x32\x74\x48\xf3\xdf\x3b\xb1\x0c\x49\x18\x12\x7a\xb2\x67\xf7\xed\x7b\x6f\xf5\xb6\x32\x5c\x2a\xdb\x3f\x00\x30\xba\xc6\xf6\x07\xe0\x14\x16\x0b\xa0\x71\x44\x60\xb9\x3c\x00\x28\x6a\xdd\x88\xfe\xaa\x96\xd0\xf8\x21\x1c\x12\xea\xeb\x8b\x63\x90\x25\x0c\xa2\x38\x1f\xb2\x41\x3c\xbe\x09\x47\x70\xfc\x86\x67\x85\x56\xa5\xac\xda\xb1\x2d\xc8\xeb\x28\x2a\x21\x4b\x3f\xe0\x89\x82\x24\x49\x07\xf1\x90\xb0\x20\xcf\x6e\xc7\x2c\xa7\x91\xef\x3e\xe3\x64\xaa\xf5\x23\xe3\x8d\x9b\xa2\x72\xb2\xe0\x4e\x6a\xf5\xc6\x7f\x86\xae\x38\xe3\xf3\xb9\x2d\xb4\xc0\x16\xa4\x7a\xbe\xf7\x3f\x3a\xbf\x3e\xd6\xd1\x46\xbe\x7c\x26\xf3\xb2\x5f\x86\x92\x51\x98\x66\x84\xb2\xfb\xa0\xfd\xdc\xe5\xd7\x24\x22\x19\x70\x25\x76\xf5\xfe\xd6\xfa\x19\x0d\xc0\xd5\x15\x1c\x3a\xd3\xe0\x21\x78\xc2\xc7\x66\x82\x35\x3a\xc6\xe7\x92\x59\x34\x4f\x68\x6c\xfb\xae\x41\x12\xb2\x94\xd0\x07\x42\xd3\x2e\xa9\x89\x39\x2d\xa4\x30\x7d\xb8\x38\xef\x5d\x5c\x7e\xed\x7d\xfb\xde\x3b\x3f\xbb\xfc\xb1\x8a\x17\x2b\x69\x1d\x1a\x66\x8b\x29\x8a\xa6\xe6\x93\x1a\xfb\x70\xb2\x0a\xfa\x9d\x99\x74\x70\x4b\x86\x79\x14\x5c\x47\xa4\x33\xb4\x5c\x9e\x74\x4b\xd6\x16\xbb\x1d\x8f\x20\x2c\xc1\x4d\xf1\xd5\x1c\x48\x0b\xa6\x51\x4a\xaa\x0a\x84\xb4\x85\x56\x0a\x0b\x87\x02\x4a\xa3\x67\xc0\x61\xc6\x57\xea\x5f\xa0\x92\x4f\x08\xd2\x01\x87\x52\xfe\x41\x01\x83\x70\x48\xc1\x70\x55\x61\x0f\x8e\xb6\x77\x58\x2c\xa0\xb3\x14\x26\x8c\x06\xe3\x11\xd9\x7d\x3c\x34\x1f\x67\xe1\x3d\xd9\xba\x43\xd3\x28\x27\x67\xb8\x79\x89\xef\x60\x3b\xe9\x56\x81\xb0\x3c\x25\x74\x1d\x00\x6b\x2c\x7a\x53\xeb\xe6\xce\xf9\x61\x3c\xb8\x23\x94\xc5\x49\x96\xfa\xb2\xd0\xc5\x23\x1a\xa6\xe7\xce\x47\xb7\x09\xf8\x8c\x85\xc6\x71\xb6\xc5\x62\xb4\x76\x9b\x2c\x2d\x60\xef\x2e\x11\xc9\x36\x68\x5e\xef\xe9\x8d\x67\x0b\xb2\x93\xe8\x86\x04\x59\x4e\x09\x1b\x05\x19\xe9\xd6\x2a\x91\xbb\xc6\x20\xab\xb8\x43\xbf\xd8\x36\x68\xff\x03\x07\x49\xe8\xcf\x97\x51\xf2\x33\x27\x69\xc6\x56\xe1\xc4\x79\x67\x73\x26\x15\xc5\xdf\x0d\x5a\x97\xc9\x19\xea\x66\xed\x75\xcf\xe4\x4e\xc5\x70\x9c\x11\x3a\x0e\x22\x16\x26\xbe\x2c\x95\x43\xa3\x78\xcd\xe4\xbc\x25\xde\x04\xb4\x2c\x5c\x3c\xa1\x71\xd2\x22\xe3\x42\x18\xb4\xf6\x63\xd8\xa6\xd8\xbf\x00\x00\x00\xff\xff\xc4\xe7\xc4\xe6\x4f\x05\x00\x00")

func kubernetesMasterGrainsConfBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesMasterGrainsConf,
		"kubernetes/master-grains.conf",
	)
}

func kubernetesMasterGrainsConf() (*asset, error) {
	bytes, err := kubernetesMasterGrainsConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/master-grains.conf", size: 1359, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesNodeGrainsConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x51\x6f\xda\x30\x14\x85\xdf\xf9\x15\x57\xaa\xfa\x08\x6b\xbb\xed\x61\xbc\x65\xe0\x76\x51\x19\x8e\x9c\xc0\x1e\x2d\x93\xdc\x10\x0b\xd7\x8e\xae\x1d\xa4\x09\xf1\xdf\xa7\x3a\x54\x4d\xd4\xa1\xbe\x45\x37\xdf\xf9\x74\x8e\xf7\xa4\xb4\xf5\xf3\x09\x00\x39\x83\xf1\x03\x60\x0a\x87\x6e\x87\x64\x31\xa0\x9f\xb6\xce\x99\x09\x40\xb9\xa3\x69\xa9\x2b\x9a\xc3\xfd\xdd\xec\xfe\xe1\xeb\xec\xdb\xf7\xd9\xdd\x97\x87\x1f\xaf\xbf\x8c\xeb\xaa\x39\x9c\x4e\x90\x09\xbe\x4d\x97\x4c\xc0\xf9\x3c\x01\x38\xdd\x82\xae\x61\xb1\xe2\x9b\xa5\x5c\xf0\xf5\x63\xfa\x04\xb7\xe7\x37\x5e\x96\xce\xd6\x7a\x1f\x63\x23\xe4\x2d\x8a\xb6\xd2\x75\x1f\x50\xad\x96\x1e\xe9\x88\xe4\x23\x9f\x64\xa9\xcc\x99\xd8\x32\x91\x5f\xf0\x1b\x48\xfe\xe4\x73\x28\x3b\x22\xb4\xc1\xfc\x85\xd0\x60\x1c\x61\x30\x40\x83\xca\x84\x66\x5a\x36\x58\x1e\x40\x79\xdf\xbd\xa0\x8f\x80\x55\x2f\x08\xda\x03\xa1\x77\xe6\xa8\x76\x06\xe1\xe6\xbd\xf8\x2f\x9e\x17\xeb\xe4\x37\x93\x7c\xcb\x84\x48\x97\xac\x2f\xd3\x38\x1f\x5e\x83\xd2\x1d\x91\x48\x57\x18\x2b\x7d\x84\xff\xb3\xa3\xf7\x2e\xf9\xe2\x99\x09\xc9\xb3\x22\xef\xcf\x95\x2b\x0f\x48\xd2\xb5\xa1\x9f\x37\x04\x3e\xb3\x08\xce\x8b\x91\x85\x9c\x0b\x43\x4b\x04\xae\x5a\x9e\x37\x3f\xd9\x8a\x15\x03\xcd\xe5\xd1\xde\x3d\x23\xe4\xaa\xe8\x91\x25\xc5\x46\x30\xf9\x94\x14\xec\x32\xab\x46\x15\x3a\x42\xb9\x57\x01\xfb\x61\x63\xe8\xaa\x2b\x5d\x17\x4c\xac\x93\x95\x4c\xb3\xfe\xac\x6d\x40\xb2\xca\x48\xdd\x46\xcf\x10\xf8\x60\xf9\x17\x00\x00\xff\xff\xa0\x6a\x40\x2c\xd2\x02\x00\x00")

func kubernetesNodeGrainsConfBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesNodeGrainsConf,
		"kubernetes/node-grains.conf",
	)
}

func kubernetesNodeGrainsConf() (*asset, error) {
	bytes, err := kubernetesNodeGrainsConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/node-grains.conf", size: 722, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesPacketKubeconfigKubeProxyYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\x31\x4f\xc3\x40\x0c\x05\xe0\xdd\xbf\xe2\x6d\x9d\x6e\x60\xbd\x11\xd4\xa9\x12\x45\x08\x10\x4c\x55\x30\x2e\xb2\x12\x7c\x91\x7d\x17\xb5\xaa\xfa\xdf\x11\x24\x80\x3a\xb0\xdd\xe9\xd9\x9f\x5f\x37\xea\x93\x78\x68\xb1\x8c\xe9\x8a\x7a\xb5\xb7\x8c\x9b\x62\x7b\x7d\xa7\x16\xe2\x91\x29\xc1\xba\x0f\xc9\xe8\xdb\xab\xa4\xd1\xcb\xe1\x48\xc0\x57\x96\x09\x00\x6a\xe9\xc5\x32\x56\xa7\x13\x36\x8f\xd7\xeb\xdd\xdd\xfd\xf6\xf9\x65\xf7\xb0\xdd\xac\x6f\x71\x3e\xaf\x88\x87\x16\xf5\x02\x1a\x0a\x77\x03\x01\x4b\x32\x33\x50\x0b\xe1\xe6\x92\xa2\xd7\x31\xd5\x21\xd2\x24\xae\xfb\x63\x46\xf5\x26\xc4\xc5\xaa\x1c\xea\x37\xb3\xbc\xe7\xc5\x1f\xe5\x97\x5d\xca\x5d\xf6\x9d\x2f\x87\xf8\xa4\x2c\xa9\x63\x2e\xcd\x6a\x5a\x20\xe2\xe6\x2e\x7f\xff\xff\x07\x3f\x03\x00\x00\xff\xff\x57\x1f\x0d\x0b\x2f\x01\x00\x00")

func kubernetesPacketKubeconfigKubeProxyYmlBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesPacketKubeconfigKubeProxyYml,
		"kubernetes/packet/kubeconfig-kube-proxy.yml",
	)
}

func kubernetesPacketKubeconfigKubeProxyYml() (*asset, error) {
	bytes, err := kubernetesPacketKubeconfigKubeProxyYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/packet/kubeconfig-kube-proxy.yml", size: 303, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesPacketKubeconfigKubeletYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\x3f\x4f\xc4\x30\x0c\x05\xf0\xdd\x9f\xe2\x6d\x37\x65\x60\xcd\x08\xea\x74\x08\x96\x83\x15\x95\xe0\x43\x56\x83\x73\xb2\x9d\x0a\x74\xea\x77\x47\xd0\xf2\x6f\x60\x4b\xf4\xec\x9f\xdf\x78\x92\x7b\x36\x97\xa6\x19\xf3\x05\x4d\xa2\x4f\x19\x57\x4d\x8f\xf2\x4c\xdd\xd9\x3c\x53\x82\x8e\x2f\x9c\x31\xf5\x47\xae\x1c\x04\x7c\x04\x99\x00\x20\xda\xc4\x9a\xb1\x3b\x9f\xb1\xbf\xbb\x1c\xae\x87\xc3\xc3\xe1\x76\x3f\xdc\x60\x59\x76\x54\x6a\xf7\xf8\x43\xd4\x56\xc6\x4a\xc0\x96\xac\x06\x44\x9d\x4b\x37\x4e\x3e\xc9\x29\x45\xf5\x34\xb3\xc9\xf1\x2d\x23\xac\x33\x95\xa6\xc1\xaf\xf1\xc9\x6c\xef\x75\xf1\x4b\xf9\x66\xb7\x66\xbf\x9a\xae\x67\x9d\x6d\x96\xc2\x69\x2c\xa5\x75\x8d\xb4\x29\x54\xba\x19\xff\xfc\xff\x1f\x7c\x0f\x00\x00\xff\xff\xac\xf4\x22\xe9\x26\x01\x00\x00")

func kubernetesPacketKubeconfigKubeletYmlBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesPacketKubeconfigKubeletYml,
		"kubernetes/packet/kubeconfig-kubelet.yml",
	)
}

func kubernetesPacketKubeconfigKubeletYml() (*asset, error) {
	bytes, err := kubernetesPacketKubeconfigKubeletYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/packet/kubeconfig-kubelet.yml", size: 294, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesReactorConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4a\x4d\x4c\x2e\xc9\x2f\xb2\xe2\x52\x50\xd0\x55\x50\x2f\x4e\xcc\x29\xd1\xcf\xcd\xcc\xcb\xcc\xcf\xd3\xd7\xd2\x2f\x2e\x49\x2c\x2a\x51\x07\x49\x81\x24\xf5\x8b\x8b\xca\xf4\xa1\xca\xf5\x33\x32\xd3\x33\x8a\x4b\x12\x4b\x52\x75\xf3\x52\xcb\xf5\x8a\x73\x8a\xb9\x00\x01\x00\x00\xff\xff\x3f\xcb\x6a\x39\x49\x00\x00\x00")

func kubernetesReactorConfBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesReactorConf,
		"kubernetes/reactor.conf",
	)
}

func kubernetesReactorConf() (*asset, error) {
	bytes, err := kubernetesReactorConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes/reactor.conf", size: 73, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"kubernetes/authn.config":                           kubernetesAuthnConfig,
	"kubernetes/authz.config":                           kubernetesAuthzConfig,
	"kubernetes/auto-accept.conf":                       kubernetesAutoAcceptConf,
	"kubernetes/aws/iam/kubernetes-master-policy.json":  kubernetesAwsIamKubernetesMasterPolicyJson,
	"kubernetes/aws/iam/kubernetes-master-role.json":    kubernetesAwsIamKubernetesMasterRoleJson,
	"kubernetes/aws/iam/kubernetes-node-policy.json":    kubernetesAwsIamKubernetesNodePolicyJson,
	"kubernetes/aws/iam/kubernetes-node-role.json":      kubernetesAwsIamKubernetesNodeRoleJson,
	"kubernetes/aws/kubeconfig-kube-proxy.yml":          kubernetesAwsKubeconfigKubeProxyYml,
	"kubernetes/aws/kubeconfig-kubelet.yml":             kubernetesAwsKubeconfigKubeletYml,
	"kubernetes/azure/kubeconfig-kube-proxy.yml":        kubernetesAzureKubeconfigKubeProxyYml,
	"kubernetes/azure/kubeconfig-kubelet.yml":           kubernetesAzureKubeconfigKubeletYml,
	"kubernetes/cluster-params.sls":                     kubernetesClusterParamsSls,
	"kubernetes/digitalocean/kubeconfig-kube-proxy.yml": kubernetesDigitaloceanKubeconfigKubeProxyYml,
	"kubernetes/digitalocean/kubeconfig-kubelet.yml":    kubernetesDigitaloceanKubeconfigKubeletYml,
	"kubernetes/failhard.conf":                          kubernetesFailhardConf,
	"kubernetes/gce/kubeconfig-kube-proxy.yml":          kubernetesGceKubeconfigKubeProxyYml,
	"kubernetes/gce/kubeconfig-kubelet.yml":             kubernetesGceKubeconfigKubeletYml,
	"kubernetes/generic/kubeconfig-kube-proxy.yml":      kubernetesGenericKubeconfigKubeProxyYml,
	"kubernetes/generic/kubeconfig-kubelet.yml":         kubernetesGenericKubeconfigKubeletYml,
	"kubernetes/kubeconfig.yaml":                        kubernetesKubeconfigYaml,
	"kubernetes/linode/kubeconfig-kube-proxy.yml":       kubernetesLinodeKubeconfigKubeProxyYml,
	"kubernetes/linode/kubeconfig-kubelet.yml":          kubernetesLinodeKubeconfigKubeletYml,
	"kubernetes/local.conf":                             kubernetesLocalConf,
	"kubernetes/log-level-debug.conf":                   kubernetesLogLevelDebugConf,
	"kubernetes/master-grains.conf":                     kubernetesMasterGrainsConf,
	"kubernetes/node-grains.conf":                       kubernetesNodeGrainsConf,
	"kubernetes/packet/kubeconfig-kube-proxy.yml":       kubernetesPacketKubeconfigKubeProxyYml,
	"kubernetes/packet/kubeconfig-kubelet.yml":          kubernetesPacketKubeconfigKubeletYml,
	"kubernetes/reactor.conf":                           kubernetesReactorConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"kubernetes": {nil, map[string]*bintree{
		"authn.config":     {kubernetesAuthnConfig, map[string]*bintree{}},
		"authz.config":     {kubernetesAuthzConfig, map[string]*bintree{}},
		"auto-accept.conf": {kubernetesAutoAcceptConf, map[string]*bintree{}},
		"aws": {nil, map[string]*bintree{
			"iam": {nil, map[string]*bintree{
				"kubernetes-master-policy.json": {kubernetesAwsIamKubernetesMasterPolicyJson, map[string]*bintree{}},
				"kubernetes-master-role.json":   {kubernetesAwsIamKubernetesMasterRoleJson, map[string]*bintree{}},
				"kubernetes-node-policy.json":   {kubernetesAwsIamKubernetesNodePolicyJson, map[string]*bintree{}},
				"kubernetes-node-role.json":     {kubernetesAwsIamKubernetesNodeRoleJson, map[string]*bintree{}},
			}},
			"kubeconfig-kube-proxy.yml": {kubernetesAwsKubeconfigKubeProxyYml, map[string]*bintree{}},
			"kubeconfig-kubelet.yml":    {kubernetesAwsKubeconfigKubeletYml, map[string]*bintree{}},
		}},
		"azure": {nil, map[string]*bintree{
			"kubeconfig-kube-proxy.yml": {kubernetesAzureKubeconfigKubeProxyYml, map[string]*bintree{}},
			"kubeconfig-kubelet.yml":    {kubernetesAzureKubeconfigKubeletYml, map[string]*bintree{}},
		}},
		"cluster-params.sls": {kubernetesClusterParamsSls, map[string]*bintree{}},
		"digitalocean": {nil, map[string]*bintree{
			"kubeconfig-kube-proxy.yml": {kubernetesDigitaloceanKubeconfigKubeProxyYml, map[string]*bintree{}},
			"kubeconfig-kubelet.yml":    {kubernetesDigitaloceanKubeconfigKubeletYml, map[string]*bintree{}},
		}},
		"failhard.conf": {kubernetesFailhardConf, map[string]*bintree{}},
		"gce": {nil, map[string]*bintree{
			"kubeconfig-kube-proxy.yml": {kubernetesGceKubeconfigKubeProxyYml, map[string]*bintree{}},
			"kubeconfig-kubelet.yml":    {kubernetesGceKubeconfigKubeletYml, map[string]*bintree{}},
		}},
		"generic": {nil, map[string]*bintree{
			"kubeconfig-kube-proxy.yml": {kubernetesGenericKubeconfigKubeProxyYml, map[string]*bintree{}},
			"kubeconfig-kubelet.yml":    {kubernetesGenericKubeconfigKubeletYml, map[string]*bintree{}},
		}},
		"kubeconfig.yaml": {kubernetesKubeconfigYaml, map[string]*bintree{}},
		"linode": {nil, map[string]*bintree{
			"kubeconfig-kube-proxy.yml": {kubernetesLinodeKubeconfigKubeProxyYml, map[string]*bintree{}},
			"kubeconfig-kubelet.yml":    {kubernetesLinodeKubeconfigKubeletYml, map[string]*bintree{}},
		}},
		"local.conf":           {kubernetesLocalConf, map[string]*bintree{}},
		"log-level-debug.conf": {kubernetesLogLevelDebugConf, map[string]*bintree{}},
		"master-grains.conf":   {kubernetesMasterGrainsConf, map[string]*bintree{}},
		"node-grains.conf":     {kubernetesNodeGrainsConf, map[string]*bintree{}},
		"packet": {nil, map[string]*bintree{
			"kubeconfig-kube-proxy.yml": {kubernetesPacketKubeconfigKubeProxyYml, map[string]*bintree{}},
			"kubeconfig-kubelet.yml":    {kubernetesPacketKubeconfigKubeletYml, map[string]*bintree{}},
		}},
		"reactor.conf": {kubernetesReactorConf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
